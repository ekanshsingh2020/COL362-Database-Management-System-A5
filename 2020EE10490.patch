diff --git a/in/ac/iitd/src/main/java/rel/PProjectFilter.java b/in/ac/iitd/src/main/java/rel/PProjectFilter.java
index cbc7fab..0a19840 100644
--- a/in/ac/iitd/src/main/java/rel/PProjectFilter.java
+++ b/in/ac/iitd/src/main/java/rel/PProjectFilter.java
@@ -4,22 +4,56 @@ import com.google.common.collect.ImmutableList;
 import org.apache.calcite.plan.RelOptCluster;
 import org.apache.calcite.plan.RelTraitSet;
 import org.apache.calcite.rel.RelNode;
+import org.apache.calcite.rex.RexCall;
+import org.apache.calcite.rex.RexInputRef;
+import org.apache.calcite.rex.RexLiteral;
 import org.apache.calcite.rel.core.Project;
 import org.apache.calcite.rel.type.RelDataType;
 import org.apache.calcite.rex.RexNode;
+import org.apache.calcite.sql.SqlOperator;
+import org.apache.calcite.sql.fun.SqlStdOperatorTable;
+import org.apache.calcite.sql.SqlKind;
+import org.apache.calcite.rex.RexVisitorImpl;
 
 import convention.PConvention;
-
+import java.util.*;
 import java.util.List;
-
+import java.util.ArrayList;
+import java.util.function.BinaryOperator;
 /*
     * PProjectFilter is a relational operator that represents a Project followed by a Filter.
     * You need to write the entire code in this file.
     * To implement PProjectFilter, you can extend either Project or Filter class.
     * Define the constructor accordinly and override the methods as required.
 */
-public class PProjectFilter implements PRel {
+public class PProjectFilter extends Project implements PRel {
+
+    private final List<RexNode> projects;
+    private final RexNode condition;
+    private final RelDataType rowType;
+
 
+    public PProjectFilter(
+            RelOptCluster cluster,
+            RelTraitSet traits,
+            RelNode input,
+            List<RexNode> projects,
+            RelDataType rowType,
+            RexNode condition) {
+                super(cluster, traits, input, projects, rowType);
+                this.condition = condition;
+                this.projects = projects;
+                this.rowType = rowType;
+    }
+
+    @Override
+    public PProjectFilter copy(RelTraitSet traitSet, RelNode input,
+                            List<RexNode> projects, RelDataType rowType) {
+        return new PProjectFilter(getCluster(), traitSet, input, projects, rowType, condition);
+    }
+    
+
+    @Override
     public String toString() {
         return "PProjectFilter";
     }
@@ -28,7 +62,14 @@ public class PProjectFilter implements PRel {
     @Override
     public boolean open(){
         logger.trace("Opening PProjectFilter");
-        /* Write your code here */
+
+        System.out.println("PProject opened");
+        System.out.println("Filter opened");
+        System.out.println(input.getClass());
+        if (this.input instanceof PRel) {
+            PRel inputNode = (PRel) this.input;
+            return inputNode.open();
+        }
         return false;
     }
 
@@ -37,14 +78,41 @@ public class PProjectFilter implements PRel {
     public void close(){
         logger.trace("Closing PProjectFilter");
         /* Write your code here */
+        System.out.println("Closing PProjectFilter");
+        if (this.input instanceof PRel) {
+            PRel inputNode = (PRel) this.input;
+            inputNode.close();
+        }
         return;
     }
 
+    Object [] temp = null;
+
+
     // returns true if there is a next row, false otherwise
     @Override
     public boolean hasNext(){
         logger.trace("Checking if PProjectFilter has next");
-        /* Write your code here */
+
+        if(this.input instanceof PRel)
+        {
+            PRel inputNodeForFilter = (PRel) this.input;
+            while(inputNodeForFilter.hasNext())
+            {
+                Object [] tempo = inputNodeForFilter.next();
+                EvaluateFilter eval = new EvaluateFilter(true,tempo);
+                if(condition.accept(eval))
+                {
+                    temp = tempo;
+                    if(temp != null)
+                        return true;
+                }
+            }
+            System.out.println("No more rows in PProjectFilter");
+            return false;
+        }
+
+
         return false;
     }
 
@@ -53,6 +121,383 @@ public class PProjectFilter implements PRel {
     public Object[] next(){
         logger.trace("Getting next row from PProjectFilter");
         /* Write your code here */
+
+        PRel inputNodeForProject = (PRel) this.input;
+        if(inputNodeForProject instanceof PRel)
+        {
+            return evaluateProject(temp);
+        }
+        
+
         return null;
     }
+
+    public Object[] evaluateProject(Object[] record) 
+    {
+        Object[] result = new Object[projects.size()];
+        for (int i = 0; i < projects.size(); i++) {
+            RexNode exp = projects.get(i);
+            if (exp instanceof RexInputRef) {
+                result[i] = temp[((RexInputRef) exp).getIndex()];
+            } else if (exp instanceof RexLiteral) {
+                RexLiteral literal = (RexLiteral) exp;
+                result[i] = literal.getValue();
+            } else if (exp instanceof RexCall) {
+                result[i] = evaluateRexCall(temp, (RexCall) exp);
+            }
+        }
+        return result;
+    }
+
+
+    private static Object evaluateRexCall(Object [] record, RexCall rexCall) {
+        if (rexCall == null) {
+            return null;
+        }
+
+        SqlOperator operator = rexCall.getOperator();
+        List<RexNode> operands = rexCall.getOperands();
+
+        if (operator == SqlStdOperatorTable.PLUS) {
+            // Handle addition
+            return evaluateNaryOperation(record, operands, Double::sum);
+        } else if (operator == SqlStdOperatorTable.MINUS) {
+            // Handle subtraction
+            return evaluateNaryOperation(record, operands, (a, b) -> a - b);
+        } else if (operator == SqlStdOperatorTable.MULTIPLY) {
+            // Handle multiplication
+            return evaluateNaryOperation(record, operands, (a, b) -> a * b);
+        } else if (operator == SqlStdOperatorTable.DIVIDE) {
+            // Handle division
+            return evaluateNaryOperation(record, operands, (a, b) -> a / b);
+        } else {
+            return null;
+        }
+    }
+
+    public static Object evaluateNaryOperation(Object[] record, List<RexNode> operands, BinaryOperator<Double> operation) {
+        if (operands.isEmpty()) {
+            return null;
+        }
+
+        List<Double> values = new ArrayList<>();
+
+        for (int i = 0; i < operands.size(); i++) {
+            Number val = (Number) evaluateRexNode(record, operands.get(i));
+            if(val == null){
+                return null;
+            }
+            values.add(val.doubleValue());
+        }
+
+        Object result = values.get(0);
+        // Perform the operation with the remaining operands
+        for (int i = 1; i < operands.size(); i++) {
+            result = operation.apply((double)result, values.get(i));
+        }
+
+        return result;
+    }
+
+    public static Object evaluateRexNode(Object[] record, RexNode rexNode) {
+        if (rexNode instanceof RexCall) {
+            return evaluateRexCall(record, (RexCall) rexNode);
+        } else if (rexNode instanceof RexLiteral) {
+            RexLiteral literal = (RexLiteral) rexNode;
+            return literal.getValue();
+        } else if (rexNode instanceof RexInputRef) {
+            return record[((RexInputRef) rexNode).getIndex()];
+        }
+        else {
+            return null; 
+        }
+    }
+
+    private static final EnumSet<SqlKind> SUPPORTED_OPS =
+            EnumSet.of(SqlKind.AND, SqlKind.OR,
+                    SqlKind.EQUALS, SqlKind.NOT_EQUALS,
+                    SqlKind.LESS_THAN, SqlKind.GREATER_THAN,
+                    SqlKind.GREATER_THAN_OR_EQUAL, SqlKind.LESS_THAN_OR_EQUAL,SqlKind.IS_NULL,SqlKind.IS_NOT_NULL);
+
+    private class EvaluateFilter extends RexVisitorImpl<Boolean> 
+    {
+
+        final Object[] record;
+        protected EvaluateFilter(boolean deep, Object[] record) 
+        {
+            super(deep);
+            this.record = record;
+        }
+
+        @Override
+        public Boolean visitCall(RexCall call) 
+        {
+            SqlKind kind = call.getKind();
+            if(!kind.belongsTo(SUPPORTED_OPS)) 
+            {
+                throw new IllegalStateException("Cannot handle this filter predicate yet");
+            }
+
+            if(kind == SqlKind.AND) 
+            {
+                boolean accept = true;
+                for(RexNode operand : call.getOperands()) 
+                {
+                    accept = accept && operand.accept(this);
+                }
+                return accept;
+            } 
+            else if(kind == SqlKind.OR) 
+            {
+                boolean accept = false;
+                for(RexNode operand : call.getOperands()) 
+                {
+                    accept = accept || operand.accept(this);
+                }
+                return accept;
+            }
+            else if(kind == SqlKind.IS_NULL)
+            {
+                RexInputRef rexInputRef = (RexInputRef)call.getOperands().get(0);
+                int index = rexInputRef.getIndex();
+                Object field = record[index];
+                if(field == null) return true;
+                return false;
+            }
+            else if(kind == SqlKind.IS_NOT_NULL)
+            {
+                RexInputRef rexInputRef = (RexInputRef)call.getOperands().get(0);
+                int index = rexInputRef.getIndex();
+                Object field = record[index];
+                if(field == null) return false;
+                return true;
+            }
+            else 
+            {
+                return eval(record, kind, call.getOperands().get(0), call.getOperands().get(1));
+            }
+        }
+
+        public boolean eval(Object[] record, SqlKind kind, RexNode leftOperand, RexNode rightOperand) 
+        {
+
+            if(leftOperand instanceof RexInputRef && rightOperand instanceof RexLiteral) 
+            {
+                RexInputRef rexInputRef = (RexInputRef)leftOperand;
+                int index = rexInputRef.getIndex();
+                Object field = record[index];
+                if(field == null) return false; // basic NULL Handling
+                RexLiteral rexLiteral = (RexLiteral) rightOperand;
+                switch (kind) 
+                {
+                    case GREATER_THAN:
+                        return isGreaterThan(field, rexLiteral);
+                    case LESS_THAN:
+                        return isLessThan(field, rexLiteral);
+                    case EQUALS:
+                        return isEqualTo(field, rexLiteral);
+                    case NOT_EQUALS:
+                        return !isEqualTo(field, rexLiteral);
+                    case GREATER_THAN_OR_EQUAL:
+                        return isGreaterThan(field, rexLiteral) || isEqualTo(field, rexLiteral);
+                    case LESS_THAN_OR_EQUAL:
+                        return isLessThan(field, rexLiteral) || isEqualTo(field, rexLiteral);
+                    default:
+                        throw new IllegalStateException("Predicate not supported yet");
+                }
+
+            }
+            else if(leftOperand instanceof RexInputRef && rightOperand instanceof RexInputRef)
+            {
+                RexInputRef rexInputRef1 = (RexInputRef)leftOperand;
+                int index1 = rexInputRef1.getIndex();
+                Object field1 = record[index1];
+                if(field1 == null) return false; // basic NULL Handling
+                RexInputRef rexInputRef2 = (RexInputRef)rightOperand;
+                int index2 = rexInputRef2.getIndex();
+                Object field2 = record[index2];
+                if(field2 == null) return false; // basic NULL Handling
+                switch (kind) 
+                {
+                    case GREATER_THAN:
+                        return isGreaterThanNew(field1, field2);
+                    case LESS_THAN:
+                        return isLessThanNew(field1, field2);
+                    case EQUALS:
+                        return isEqualToNew(field1, field2);
+                    case NOT_EQUALS:
+                        return !isEqualToNew(field1, field2);
+                    case GREATER_THAN_OR_EQUAL:
+                        return isGreaterThanNew(field1, field2) || isEqualToNew(field1, field2);
+                    case LESS_THAN_OR_EQUAL:
+                        return isLessThanNew(field1, field2) || isEqualToNew(field1, field2);
+                    default:
+                        throw new IllegalStateException("Predicate not supported yet");
+                }
+            }
+            else if(leftOperand instanceof RexCall && rightOperand instanceof RexLiteral)
+            {
+                Object tempobj = evaluateRexCall(record,(RexCall)leftOperand);
+                if(tempobj == null) return false; // basic NULL Handling
+                RexLiteral rexLiteral = (RexLiteral) rightOperand;
+                switch (kind) 
+                {
+                    case GREATER_THAN:
+                        return isGreaterThan(tempobj, rexLiteral);
+                    case LESS_THAN:
+                        return isLessThan(tempobj, rexLiteral);
+                    case EQUALS:
+                        return isEqualTo(tempobj, rexLiteral);
+                    case NOT_EQUALS:
+                        return !isEqualTo(tempobj, rexLiteral);
+                    case GREATER_THAN_OR_EQUAL:
+                        return isGreaterThan(tempobj, rexLiteral) || isEqualTo(tempobj, rexLiteral);
+                    case LESS_THAN_OR_EQUAL:
+                        return isLessThan(tempobj, rexLiteral) || isEqualTo(tempobj, rexLiteral);
+                    default:
+                        throw new IllegalStateException("Predicate not supported yet");
+                }
+            } 
+            else if(leftOperand instanceof RexCall && rightOperand instanceof RexInputRef)
+            {
+                Object tempobj = evaluateRexCall(record,(RexCall)leftOperand);
+                if(tempobj == null) return false; // basic NULL Handling
+                RexInputRef rexInputRef = (RexInputRef)rightOperand;
+                int index = rexInputRef.getIndex();
+                Object field = record[index];
+                if(field == null) return false; // basic NULL Handling
+                switch (kind) 
+                {
+                    case GREATER_THAN:
+                        return isGreaterThanNew(tempobj, field);
+                    case LESS_THAN:
+                        return isLessThanNew(tempobj, field);
+                    case EQUALS:
+                        return isEqualToNew(tempobj, field);
+                    case NOT_EQUALS:
+                        return !isEqualToNew(tempobj, field);
+                    case GREATER_THAN_OR_EQUAL:
+                        return isGreaterThanNew(tempobj, field) || isEqualToNew(tempobj, field);
+                    case LESS_THAN_OR_EQUAL:
+                        return isLessThanNew(tempobj, field) || isEqualToNew(tempobj, field);
+                    default:
+                        throw new IllegalStateException("Predicate not supported yet");
+                }
+            }
+            else if(leftOperand instanceof RexInputRef && rightOperand instanceof RexCall)
+            {
+                RexInputRef rexInputRef = (RexInputRef)leftOperand;
+                int index = rexInputRef.getIndex();
+                Object field = record[index];
+                if(field == null) return false; // basic NULL Handling
+                Object tempobj = evaluateRexCall(record,(RexCall)rightOperand);
+                if(tempobj == null) return false; // basic NULL Handling
+                switch (kind) 
+                {
+                    case GREATER_THAN:
+                        return isGreaterThanNew(field, tempobj);
+                    case LESS_THAN:
+                        return isLessThanNew(field, tempobj);
+                    case EQUALS:
+                        return isEqualToNew(field, tempobj);
+                    case NOT_EQUALS:
+                        return !isEqualToNew(field, tempobj);
+                    case GREATER_THAN_OR_EQUAL:
+                        return isGreaterThanNew(field, tempobj) || isEqualToNew(field, tempobj);
+                    case LESS_THAN_OR_EQUAL:
+                        return isLessThanNew(field, tempobj) || isEqualToNew(field, tempobj);
+                    default:
+                        throw new IllegalStateException("Predicate not supported yet");
+                }
+            }
+            else if(leftOperand instanceof RexLiteral && rightOperand instanceof RexCall)
+            {
+                RexLiteral rexLiteral = (RexLiteral) leftOperand;
+                Object tempobj = evaluateRexCall(record,(RexCall)rightOperand);
+                if(tempobj == null) return false; // basic NULL Handling
+                switch (kind) 
+                {
+                    case GREATER_THAN:
+                        return isGreaterThan(tempobj, rexLiteral);
+                    case LESS_THAN:
+                        return isLessThan(tempobj, rexLiteral);
+                    case EQUALS:
+                        return isEqualTo(tempobj, rexLiteral);
+                    case NOT_EQUALS:
+                        return !isEqualTo(tempobj, rexLiteral);
+                    case GREATER_THAN_OR_EQUAL:
+                        return isGreaterThan(tempobj, rexLiteral) || isEqualTo(tempobj, rexLiteral);
+                    case LESS_THAN_OR_EQUAL:
+                        return isLessThan(tempobj, rexLiteral) || isEqualTo(tempobj, rexLiteral);
+                    default:
+                        throw new IllegalStateException("Predicate not supported yet");
+                }
+            }
+            else if(leftOperand instanceof RexCall && rightOperand instanceof RexCall)
+            {
+                Object tempobj1 = evaluateRexCall(record,(RexCall)leftOperand);
+                if(tempobj1 == null) return false; // basic NULL Handling
+                Object tempobj2 = evaluateRexCall(record,(RexCall)rightOperand);
+                if(tempobj2 == null) return false; // basic NULL Handling
+                switch (kind) 
+                {
+                    case GREATER_THAN:
+                        return isGreaterThanNew(tempobj1, tempobj2);
+                    case LESS_THAN:
+                        return isLessThanNew(tempobj1, tempobj2);
+                    case EQUALS:
+                        return isEqualToNew(tempobj1, tempobj2);
+                    case NOT_EQUALS:
+                        return !isEqualToNew(tempobj1, tempobj2);
+                    case GREATER_THAN_OR_EQUAL:
+                        return isGreaterThanNew(tempobj1, tempobj2) || isEqualToNew(tempobj1, tempobj2);
+                    case LESS_THAN_OR_EQUAL:
+                        return isLessThanNew(tempobj1, tempobj2) || isEqualToNew(tempobj1, tempobj2);
+                    default:
+                        throw new IllegalStateException("Predicate not supported yet");
+                }
+            }
+            else 
+            {
+                throw new IllegalStateException("Predicate not supported yet");
+            }
+
+        }
+
+        private boolean isGreaterThanNew(Object o1, Object o2) 
+        {
+            return ((Comparable)o1).compareTo((Comparable)o2) > 0;
+        }
+        private boolean isLessThanNew(Object o1, Object o2) 
+        {
+            return ((Comparable)o1).compareTo((Comparable)o2) < 0;
+        }
+        private boolean isEqualToNew(Object o1, Object o2) 
+        {
+            return ((Comparable)o1).compareTo((Comparable)o2) == 0;
+        }
+
+        private boolean isGreaterThan(Object o, RexLiteral rexLiteral) 
+        {
+            return ((Comparable)o).compareTo(rexLiteral.getValueAs(o.getClass())) > 0;
+        }
+
+        private boolean isLessThan(Object o, RexLiteral rexLiteral) 
+        {
+            return ((Comparable)o).compareTo(rexLiteral.getValueAs(o.getClass())) < 0;
+        }
+
+        private boolean isEqualTo(Object o, RexLiteral rexLiteral) 
+        {
+            try 
+            {
+                return ((Comparable)o).compareTo(rexLiteral.getValueAs(o.getClass())) == 0;
+            } 
+            catch (Exception e) 
+            {
+                throw new IllegalStateException("Predicate not supported yet");
+            }
+        }
+
+    }
 }
diff --git a/in/ac/iitd/src/main/java/rules/PRules.java b/in/ac/iitd/src/main/java/rules/PRules.java
index 8f94ffe..3ccd9be 100644
--- a/in/ac/iitd/src/main/java/rules/PRules.java
+++ b/in/ac/iitd/src/main/java/rules/PRules.java
@@ -2,14 +2,19 @@ package rules;
 
 import org.apache.calcite.plan.Convention;
 import org.apache.calcite.plan.RelOptRule;
+import org.apache.calcite.plan.RelOptRuleCall;
 import org.apache.calcite.plan.RelOptTable;
 import org.apache.calcite.rel.RelNode;
 import org.apache.calcite.rel.convert.ConverterRule;
 import org.apache.calcite.rel.core.TableScan;
+import org.apache.calcite.rel.logical.LogicalFilter;
+import org.apache.calcite.rel.logical.LogicalProject;
 import org.apache.calcite.rel.logical.LogicalTableScan;
+import org.apache.calcite.rel.type.RelDataType;
 
 import convention.PConvention;
 import rel.PTableScan;
+import rel.PProjectFilter;
 
 import org.checkerframework.checker.nullness.qual.Nullable;
 
@@ -50,10 +55,36 @@ public class PRules {
     // Write a class PProjectFilterRule that converts a LogicalProject followed by a LogicalFilter to a single PProjectFilter node.
     
     // You can make any changes starting here.
-    public static class PProjectFilterRule {
+    public static class PProjectFilterRule extends RelOptRule{
 
         public static final PProjectFilterRule INSTANCE = new PProjectFilterRule();
 
+        private PProjectFilterRule() {
+            // project is above the filter
+            super(operand(LogicalProject.class, operand(LogicalFilter.class, any())), "PProjectFilterRule");
+        }
+    
+        @Override
+        public void onMatch(RelOptRuleCall call) {
+            final LogicalProject project = call.rel(0);
+            final LogicalFilter filter = call.rel(1);
+            
+            // Create PProjectFilter node by combining the Project and Filter nodes
+            final RelNode input = filter.getInput();
+            final RelNode pProjectFilter = new PProjectFilter(
+                project.getCluster(),
+                project.getTraitSet().replace(PConvention.INSTANCE),
+                input,
+                project.getProjects(),
+                project.getRowType(),
+                filter.getCondition()
+            );
+    
+            call.transformTo(pProjectFilter);
+        }
+
+    
+
     }
 
 }
